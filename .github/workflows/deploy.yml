# 이 파일의 이름입니다
name: deploy

# 언제 이 yml 을 작동시키는지를 설명합니다
on:
  # 수동으로 작동시킬 수 있도록 하는 설정입니다
  workflow_dispatch:
  # main 브랜치에서 push 가 발생하면 job 을 실행합니다
  push:
    branches:
      - main

jobs:
  # 이 job 의 이름입니다
  KUA:
    # 우리가 등록한 Github Self Hosted Runner 에서 실행합니다
    runs-on: ubuntu
    
    env:
      working-directory: ./KUA
    # 잡의 구체적인 단계입니다
    steps:
      # 처음 _work 폴더에 github actions 프로그램이 파일을 수정할 권한이 없어서, 권한을 부여해 주기 위한 작업입니다
      # 이 명령을 통해서 이미 있는 폴더에 git pull 을 사용할 수 있습니다
      - name: change permission
        # 마지막 jwp-shopping-order 는 repository 이름입니다.
        run: |
          sudo chown -R ubuntu:ubuntu /home/ubuntu/actions-runner/_work/DevKor-teamB-back

      # git clone, git pull, git fetch 같은 작업을 단순화 하기 위한 action 입니다. actions/checkout@v3 
      # 미리 다른 개발자가 만들어둔 action 을 사용한다는 의미입니다
      - uses: actions/checkout@v3
      
      # 파이썬과 pip를 설치하고, 필요하면 버추얼 환경을 설정합니다.
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.12.2'
      
      - name: Install dependencies
        run: |
          python -m venv venv
          source venv/bin/activate
          pip install -r requirements.txt

      # Django 프로젝트의 마이그레이션을 적용합니다
      - name: make migraions
        run: |
          source venv/bin/activate
          python manage.py makemigrations
          
      - name: Apply migrations
        run: |
          source venv/bin/activate
          python manage.py migrate

      # 80 번 포트가 이미 있다면, 그 프로그램을 종료합니다
      - name: kill 8000 port if exist
        run: |
          if sudo lsof -i :8000; then
            echo "Port 8000 is already in use. Killing the process..."
            sudo lsof -i :8000 | awk 'NR!=1 {print $2}' | sudo xargs kill -9
          fi

      # Django 서버를 실행합니다
      - name: deploy
        run: |
          source venv/bin/activate
          nohup python manage.py runserver 0.0.0.0:8000 &