name: Build Docker Container after Django Test

on:
  push:
    branches: [develop]
    
env:
  DOCKER_IMAGE: ghcr.io/euizzang8001/kua-backend
  DOCKER_CONTAINER: kua-backend

jobs:
  test_django:
    uses: DevKor-github/DevKor-teamB-back/.github/workflows/kua-test.yml@main
  env:
      working-directory: ./KUA
      DEBUG: "0"
      DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
      DB_NAME: ${{ secrets.DB_NAME }}
      DB_USER: ${{ secrets.DB_USER }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      DB_HOST: ${{secrets.DB_HOST}}  # localhost since postgres service runs on the same host
      DB_PORT: 5432
      EMAIL_PORT: ${{ secrets.EMAIL_PORT }}
      EMAIL_HOST_USER: ${{ secrets.EMAIL_HOST_USER }}
      EMAIL_HOST_PASSWORD: ${{ secrets.EMAIL_HOST_PASSWORD }}

  container_builder:
    runs-on: ubuntu-latest
    needs: [test_django]
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Build container image
        run: |
          docker build \
          -t euizzang8001/kua-backend:${GITHUB_SHA::7} \
          -t euizzang8001/kua-backend:latest \
          .
        working-directory: ${{ env.working-directory }}
  deploy:
    needs: build
    runs-on: self-hosted
    steps:
      - name: setup .env.prod
        run: |
          echo "DB_HOST=${{ secrets.DB_HOST }}" >> .env
          echo "DB_PORT=${{ secrets.DB_PORT }}" >> .env
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
          echo "DB_USERNAME=${{ secrets.DB_USERNAME }}" >> .env
          echo "DB_DATABASE=${{ secrets.DB_DATABASE }}" >> .env
          echo "EMAIL_PORT=${{ secrets.EMAIL_PORT}}" >> .env
          echo "EMAIL_HOST_USER=${{ secrets.EMAIL_HOST_USER }}" >> .env
          echo "EMAIL_HOST_PASSWORD=${{ secrets.EMAIL_HOST_PASSWORD }}" >> .env
          echo "DJANGO_SECRET_KEY=${{ secrets.DJANGO_SECRET_KEY }}" >> .env

          cat .env

      - name: Run Docker
        run: |
          sudo docker stop ${{ env.DOCKER_CONTAINER }} && sudo docker rm ${{ env.DOCKER_CONTAINER }} && sudo docker rmi ${{ env.DOCKER_IMAGE }}:latest
          sudo docker run --env-file ./.env -d --name ${{ env.DOCKER_CONTAINER }} --network bridge -p 8000:8000 --restart always ${{ env.DOCKER_IMAGE }}:latest
